{"version":3,"sources":["components/SignIn/SignIn.tsx","components/ChatRoom/ChatMessage.tsx","components/ChatRoom/ChatRoom.tsx","components/SignOut/SignOut.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["SignIn","props","className","onClick","provider","firebase","auth","GoogleAuthProvider","signInWithPopup","ChatMessage","sent","src","photoURL","message","ChatRoom","messagesRef","firestore","collection","query","orderBy","useState","inputText","setInputText","useCollectionData","idField","messages","useEffect","scrollToBottom","messagesDiv","document","getElementById","scrollTop","scrollHeight","sendMessage","e","a","preventDefault","add","text","createdAt","FieldValue","serverTimestamp","uid","currentUser","then","catch","reason","alert","id","map","onSubmit","placeholder","value","onChange","target","type","SignOut","signOut","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","App","useAuthState","user","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.4cb43950.chunk.js","sourcesContent":["import React from 'react';\nimport './SignIn.css';\n\n\nimport firebase from 'firebase/app';\n\ninterface SignInProps {\n    readonly auth: firebase.auth.Auth;\n}\n\nconst SignIn = (props: SignInProps) => {\n\n    const signInWithGoogle = () => {\n        const provider = new firebase.auth.GoogleAuthProvider();\n        props.auth.signInWithPopup(provider)\n    }\n\n    return <button className=\"signInButton\" onClick={signInWithGoogle}>Sign in with Google</button>;\n\n}\n\nexport default SignIn;","import React from 'react';\nimport './ChatMessage.css';\n\ninterface ChatMessageProps {\n    readonly sent: boolean;\n    readonly message: string;\n    readonly photoURL: string;\n}\n\nconst ChatMessage = (props: ChatMessageProps) => <div className={props.sent ? 'sent' : 'received'}>\n    <img className={props.sent ? 'sent-image' : 'received-image'} src={props.photoURL} />\n    <div className={props.sent ? 'sent-message' : 'received-message'}>{props.message}</div>\n</div>;\n\nexport default ChatMessage;","import React, { FormEvent, useEffect, useState } from 'react';\n\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\n\nimport { useCollectionData } from 'react-firebase-hooks/firestore';\nimport ChatMessage from './ChatMessage';\nimport './ChatRoom.css';\n\ninterface ChatRoomProps {\n    readonly auth: firebase.auth.Auth;\n    readonly firestore: firebase.firestore.Firestore;\n}\n\ninterface Chat {\n    readonly createdAt: string;\n    readonly photoURL: string;\n    readonly text: string;\n    readonly id: string;\n    readonly uid: string;\n}\n\nconst ChatRoom = (props: ChatRoomProps) => {\n\n    const messagesRef = props.firestore.collection('messages');\n    const query = messagesRef.orderBy('createdAt');\n    const [inputText, setInputText] = useState('');\n\n    const [messages]: [Chat[] | undefined, boolean, Error | undefined] = useCollectionData(query, {idField: 'id'});\n\n    useEffect(() => {\n        scrollToBottom();\n    }, [messages]);\n\n    const scrollToBottom = () => {\n        const messagesDiv = document.getElementById(\"messages\");\n        if (messagesDiv) messagesDiv.scrollTop = messagesDiv.scrollHeight;\n    }\n\n    const sendMessage = async (e: FormEvent) => {\n        e.preventDefault();\n\n        if (inputText !== '') {\n            await messagesRef.add({\n                text: inputText,\n                createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n                uid: props.auth.currentUser?.uid,\n                photoURL: props.auth.currentUser?.photoURL\n            })\n            .then(() => scrollToBottom())\n            .catch(reason => alert(reason));\n        }\n\n        setInputText('');\n    }\n\n    return <>\n        <div id=\"messages\" className=\"messages\">\n            {messages && messages.map(message => <ChatMessage key={message.id} message={message.text} sent={message.uid === props.auth.currentUser?.uid} photoURL={message.photoURL}/>)}\n        </div>\n\n        <form className=\"chatBox\" onSubmit={sendMessage}>\n            <input placeholder=\"Enter your message...\" value={inputText} onChange={e => setInputText(e.target.value)} />\n            <button className=\"sendButton\" type=\"submit\">Send</button>\n        </form>\n    </>;\n\n}\n\nexport default ChatRoom;","import React from 'react';\nimport './SignOut.css';\n\nimport firebase from 'firebase/app';\n\ninterface SignOutProps {\n    readonly auth: firebase.auth.Auth;\n}\n\nconst SignOut = (props: SignOutProps) => props.auth.currentUser && <button className=\"signOutButton\" onClick={() => props.auth.signOut()}>Sign out</button>;\n\nexport default SignOut;","import React from 'react';\nimport './App.css';\n\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\n\nimport { useAuthState } from 'react-firebase-hooks/auth';\nimport SignIn from './components/SignIn/SignIn';\nimport ChatRoom from './components/ChatRoom/ChatRoom';\nimport SignOut from './components/SignOut/SignOut';\n\nfirebase.initializeApp({\n  apiKey: \"AIzaSyDi_lxSLjiaMSY5_-otw2Lx4urkn_kbhTk\",\n  authDomain: \"real-time-chat-75142.firebaseapp.com\",\n  projectId: \"real-time-chat-75142\",\n  storageBucket: \"real-time-chat-75142.appspot.com\",\n  messagingSenderId: \"967555832373\",\n  appId: \"1:967555832373:web:c170b32e8a4717d5376f7c\",\n  measurementId: \"G-M7G77BR3V9\"\n});\n\nconst auth = firebase.auth();\nconst firestore = firebase.firestore();\n\nfunction App() {\n\n  const [user] = useAuthState(auth);\n\n  return (\n    <div className=\"App\">\n      <header className=\"header\">\n        <div className=\"title\">Real-time Chatroom</div>\n        <SignOut auth={auth} />\n      </header>\n\n      {user ? <ChatRoom auth={auth} firestore={firestore} /> : <SignIn auth={auth} />}\n    </div>\n  );\n}\n\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}